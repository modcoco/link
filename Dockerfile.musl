FROM --platform=$BUILDPLATFORM alpine:20240807 AS builder
ARG TARGETOS
ARG TARGETARCH
WORKDIR /workspace
COPY . .

RUN apk update && apk add --no-cache \
    perl \
    make \
    curl \
    libgcc \
    gcc \
    musl-dev \
    git

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

RUN if [ "${TARGETARCH}" = "amd64" ]; then \
        wget https://musl.cc/x86_64-linux-musl-cross.tgz; \
        tar -zxvf x86_64-linux-musl-cross.tgz -C /usr; \
        export PATH=$PATH:/usr/x86_64-linux-musl-cross/bin; \
        export CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc; \
        export AR_x86_64_unknown_linux_musl=x86_64-linux-musl-ar; \
        export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-gcc; \
        export TARGET_TRIPLE=x86_64-unknown-linux-musl; \
        . "$HOME/.cargo/env"; \
        rustup target add x86_64-unknown-linux-musl; \
    elif [ "${TARGETARCH}" = "arm64" ]; then \
        wget https://musl.cc/aarch64-linux-musl-cross.tgz; \
        tar -zxvf aarch64-linux-musl-cross.tgz  -C /usr; \
        export PATH=$PATH:/usr/aarch64-linux-musl-cross/bin; \
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-musl-gcc; \
        export AR_aarch64_unknown_linux_gnu=aarch64-linux-musl-ar; \
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-musl-gcc; \
        export TARGET_TRIPLE=aarch64-unknown-linux-musl; \
        . "$HOME/.cargo/env"; \
        rustup target add aarch64-unknown-linux-musl; \
    fi && \
    cargo build --release --target ${TARGET_TRIPLE} && \
    cp /workspace/target/${TARGET_TRIPLE}/release/link /workspace/target/link

FROM alpine:3.20
RUN apk update && apk add --no-cache ca-certificates
RUN adduser -D app
WORKDIR /home/app
COPY --from=builder /workspace/target/link /bin
RUN chown -R app:app /home/app
USER app
ENTRYPOINT ["/bin/link"]
